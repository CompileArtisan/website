---
interface Props {
    title: string;
    description?: string;
}

const { title } = Astro.props;

import '../styles/global.css';
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{ title }</title>
    <link rel="preload" href="./styles/global.css" as="style" />
    <link rel="stylesheet" type="text/css" href="./styles/global.css" />
    <link rel="preload" href="/Perfect%20DOS%20VGA%20437%20Win.ttf" as="font" type="font/ttf" crossorigin="anonymous">
    <link rel="icon" type="image/png" href="/favicon-32x32.png" sizes="32x32">
    <link rel="icon" type="image/png" href="/android-chrome-192x192.png" sizes="192x192">
    <link rel="icon" type="image/png" href="/android-chrome-512x512.png" sizes="512x512">
    <link rel="apple-touch-icon" href="/apple-touch-icon.png">
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="icon" type="image/png" href="/favicon-16x16.png" sizes="16x16">
    <script>
        window.MathJax = {
            tex: {
                inlineMath: [['$', '$']],
                displayMath: [['$$', '$$']],
                processEscapes: true,
                tags: 'ams'
            },
            svg: {
                fontCache: 'global'
            },
            options: {
                renderActions: {
                    addMenu: []
                },
                processHtmlClass: 'markdown-content'
            }
        };
    </script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js"></script>
</head>
<body>
    <div class="header">
        <a href="/">CompileArtisan</a>
    </div>

    <div class="navbar">
        <a href="/" class={Astro.url.pathname === '/' ? 'active' : ''}>Home</a>
        <a href="/blogs/" class={Astro.url.pathname === '/blogs/' ? 'active' : ''}>Blogs</a>
        <a href="/work/" class={Astro.url.pathname === '/work/' ? 'active' : ''}>Some Work of Mine</a>
    </div>

    <div class="mobile-menu">
        <input type="checkbox" id="menu-toggle" class="menu-toggle">
        <label for="menu-toggle" class="menu-icon">
            <span></span>
            <span></span>
            <span></span>
        </label>
        <div class="mobile-menu-content">
            <a href="/" class={Astro.url.pathname === '/' ? 'active' : ''}>Home</a>
            <a href="/blogs/" class={Astro.url.pathname === '/blogs/' ? 'active' : ''}>Blogs</a>
            <a href="/work/" class={Astro.url.pathname === '/work/' ? 'active' : ''}>Some Work of Mine</a>
        </div>
    </div>

    <slot />

    <div class="footer">
      <div>
        This website is part of the <a href="https://amrita.town">amrita.town</a> webring.
      </div>
      <a href="https://amrita.town/prev"> ← prev </a> | <a href="https://amrita.town/random"> ⚅ random </a> | <a href="https://amrita.town/next"> next → </a>
    </div>

    <script>
        const tabs = ["/", "/blogs/", "/work/"];
        const items = document.querySelectorAll('li a');

        let active = tabs.indexOf(window.location.pathname);
        let active_item = -1

        function highlight(index){
            items.forEach(link => link.classList.remove('selected'))
            if (items[index]) {
              items[index].classList.add('selected');
            }
        }

        document.addEventListener("keydown", (event) => {
            switch (event.key) {
                case "ArrowLeft":
                    active = (active - 1 + tabs.length) % tabs.length;
                    window.location.href = tabs[active];
                    break;

                case "ArrowRight":
                    active = (active + 1) % tabs.length;
                    window.location.href = tabs[active];
                    break;

                case "ArrowDown":
                    active_item = (active_item + 1) % items.length
                    highlight(active_item);
                    break;

                case "ArrowUp":
                    active_item = (active_item + items.length - 1) % items.length
                    highlight(active_item);
                    break;

                case "Enter":
                    if(active_item>=0){
                      window.location.href = items[active_item];
                    }
                    break;

                case "Escape":
                    active_item = -1;
                    items.forEach(link => link.classList.remove('selected'))
                    break;

                default:
                    break;
            }
        });
    </script>
</body>
</html>
